I"ýÐ<h1 id="overview">Overview:</h1>

<p>It is trivial to construct the fractal-like attractor for an iterated function system, since each IFS defines a unique fractal. However the inverse of this problem is difficult in general; given an an attractor (in this case an image), what is the iterated function system that generates that attractor? This project constructs an IFS which approximates a provided image. The non-trivial part of this project was to construct a dataset for training a model. Using graph-directed constructions of fractals, a dataset of images with uniformly distributed fractal dimension was constructed.</p>

<h1 id="results">Results:</h1>

<p>Using a graph-directed construction of iterated function systems, we can define the IFS for a large class of fractals. Essentially, we can encode the IFS for a fractal using an adjacency matrix. From an adjacency matrix, we can construct an image. The dataset consists of matrices E0 and images which are generated by E0. A keras model was then trained to predict E0 from the image generated by E0, so that from arbitrary images we can retrieve the IFS which best approximates the provided image.</p>

<h1 id="code-walkthrough">Code Walkthrough</h1>
<p>We donâ€™t know the distribution of the dimensions for all fractals in nature, so we create
a data set that has an approximately uniform distribution of dimension.</p>

<p>The goal here is to create a function that produces a list of E0 matrices, where the distribution
of the dimensions of all such E0 matrices is uniform. In this way we can create a data set that is
less biased towards any particular dimension (there are caveats with this).</p>

<p>To create an E0 matrix, we create a random matrix [ceil(a_{i,j} - (1-p)]_{i,j &lt;= base} with a 
being a uniformly distributed random number in [0, 1]. The value p is constant, and controls how many
1â€™s and 0â€™s there are in E0. There isnâ€™t just one correct value to pick for p, since for
fixing p at some value gives a narrow distribution of dimensions for the IFS generated by E0. 
So the trick is to find a relationship between p and the dimension of E0 so that we can 
vary p to create a uniformly distributed (in dimension) training set.</p>

<p>When p = 1, then E0 will contain only 1â€™s, and when p = 0, then E0 will contain only 0â€™s</p>

<p>First we compute the relationship between p and the dimension of the IFS generated by E0, 
then we use the inverse of that relationship to create a set of E0 such that the dimensions 
of all E0 in the set are uniformly distributed.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib.pylab</span> <span class="kn">import</span> <span class="n">rcParams</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">from</span> <span class="nn">progress_bar</span> <span class="kn">import</span> <span class="n">progressbar</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">optimize</span>
<span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">gumbel_l</span>
<span class="kn">from</span> <span class="nn">statistics</span> <span class="kn">import</span> <span class="n">mean</span>
<span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="k">class</span> <span class="nc">make_base9_im</span><span class="p">():</span>
    <span class="s">'''
    This class converts E0 matrices into an image representing the IFS generated
    by E0 using the standard base 9 stuff.
    '''</span>
    <span class="n">e0</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">700</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">3</span>
    
    <span class="k">def</span> <span class="nf">get_x0</span><span class="p">(</span><span class="n">e0</span><span class="p">):</span>
        <span class="n">x0</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">e0</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">x0</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">x0</span>   
    
    <span class="k">def</span> <span class="nf">get_xn</span><span class="p">(</span><span class="n">x0</span><span class="p">,</span> <span class="n">str_length</span><span class="p">):</span>
        <span class="n">xn</span> <span class="o">=</span> <span class="n">x0</span> <span class="c1">#initialize Xn
</span>        <span class="k">for</span> <span class="n">loops</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">str_length</span><span class="p">):</span>
            <span class="n">xnplus1</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">xn</span><span class="p">:</span>
                <span class="n">last</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">x0</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">last</span><span class="p">:</span>
                        <span class="n">xnplus1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>    
            <span class="n">xn</span> <span class="o">=</span> <span class="n">xnplus1</span>       
        <span class="k">return</span> <span class="n">xn</span>
    
    <span class="k">def</span> <span class="nf">rgb_to_gray</span><span class="p">(</span><span class="n">rgb</span><span class="p">):</span> 
        <span class="n">rgb</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">rgb</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">rgb</span><span class="p">[...,:</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.2989</span><span class="p">,</span> <span class="mf">0.5870</span><span class="p">,</span> <span class="mf">0.1140</span><span class="p">]).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float64</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_points</span><span class="p">(</span><span class="n">xn</span><span class="p">):</span>
        <span class="n">points</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">route</span> <span class="ow">in</span> <span class="n">xn</span><span class="p">:</span>
            <span class="n">scale</span> <span class="o">=</span> <span class="mi">2</span><span class="o">/</span><span class="mi">3</span>
            <span class="n">pos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">route</span><span class="p">:</span>
                <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'0'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'1'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'2'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'3'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'4'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'5'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'6'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'7'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'8'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span> 
                <span class="n">dpos</span> <span class="o">=</span> <span class="n">dpos</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'float64'</span><span class="p">)</span>
                <span class="n">pos</span> <span class="o">+=</span> <span class="n">scale</span><span class="o">*</span><span class="n">dpos</span>
                <span class="n">scale</span> <span class="o">*=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">3</span>
            <span class="n">points</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">pos</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> 
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">get_im</span><span class="p">(</span><span class="n">e0</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">res</span><span class="p">):</span>
        <span class="n">xn</span> <span class="o">=</span> <span class="n">make_base9_im</span><span class="p">.</span><span class="n">get_xn</span><span class="p">(</span><span class="n">make_base9_im</span><span class="p">.</span><span class="n">get_x0</span><span class="p">(</span><span class="n">e0</span><span class="p">),</span> <span class="n">res</span><span class="p">)</span>
        <span class="n">points</span> <span class="o">=</span> <span class="n">make_base9_im</span><span class="p">.</span><span class="n">get_points</span><span class="p">(</span><span class="n">xn</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="s">"RGB"</span><span class="p">,</span> <span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="s">"#FFFFFF"</span><span class="p">)</span>
        <span class="n">pixels</span> <span class="o">=</span> <span class="n">im</span><span class="p">.</span><span class="n">load</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">point</span> <span class="ow">in</span> <span class="n">points</span><span class="p">:</span>
            <span class="n">pixels</span><span class="p">[</span><span class="nb">round</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">point</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">round</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">point</span><span class="p">[</span><span class="mi">1</span><span class="p">]))]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">make_base9_im</span><span class="p">.</span><span class="n">rgb_to_gray</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">rescale_im</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">image</span><span class="p">)</span> <span class="o">==</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">:</span>
            <span class="n">img_data</span> <span class="o">=</span> <span class="n">image</span>
            <span class="n">converted_im</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">(</span><span class="n">img_data</span><span class="p">).</span><span class="n">convert</span><span class="p">(</span><span class="s">"L"</span><span class="p">)</span>
            <span class="n">img_data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">converted_im</span><span class="p">.</span><span class="n">resize</span><span class="p">((</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="n">Image</span><span class="p">.</span><span class="n">ADAPTIVE</span><span class="p">))</span> <span class="c1">#resizing
</span>            <span class="k">return</span> <span class="n">img_data</span>

<span class="k">class</span> <span class="nc">make_base4_im</span><span class="p">():</span>
    <span class="s">'''
    This class converts E0 matrices into an image representing the IFS generated
    by E0 using the standard base 4 stuff.
    '''</span>
    <span class="n">e0</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">700</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">3</span>
    
    <span class="k">def</span> <span class="nf">get_x0</span><span class="p">(</span><span class="n">e0</span><span class="p">):</span>
        <span class="n">x0</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">e0</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">x0</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">x0</span>   
    
    <span class="k">def</span> <span class="nf">get_xn</span><span class="p">(</span><span class="n">x0</span><span class="p">,</span> <span class="n">str_length</span><span class="p">):</span>
        <span class="n">xn</span> <span class="o">=</span> <span class="n">x0</span> <span class="c1">#initialize Xn
</span>        <span class="k">for</span> <span class="n">loops</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">str_length</span><span class="p">):</span>
            <span class="n">xnplus1</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">xn</span><span class="p">:</span>
                <span class="n">last</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">x0</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">last</span><span class="p">:</span>
                        <span class="n">xnplus1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>    
            <span class="n">xn</span> <span class="o">=</span> <span class="n">xnplus1</span>       
        <span class="k">return</span> <span class="n">xn</span>
    
    <span class="k">def</span> <span class="nf">rgb_to_gray</span><span class="p">(</span><span class="n">rgb</span><span class="p">):</span> 
        <span class="n">rgb</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">rgb</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">rgb</span><span class="p">[...,:</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.2989</span><span class="p">,</span> <span class="mf">0.5870</span><span class="p">,</span> <span class="mf">0.1140</span><span class="p">]).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float64</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_points</span><span class="p">(</span><span class="n">xn</span><span class="p">):</span>
        <span class="n">points</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">route</span> <span class="ow">in</span> <span class="n">xn</span><span class="p">:</span>
            <span class="n">scale</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">2</span>
            <span class="n">pos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">route</span><span class="p">:</span>
                <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'0'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'1'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'2'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'3'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
 
                <span class="n">dpos</span> <span class="o">=</span> <span class="n">dpos</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'float64'</span><span class="p">)</span>
                <span class="n">pos</span> <span class="o">+=</span> <span class="n">scale</span><span class="o">*</span><span class="n">dpos</span>
                <span class="n">scale</span> <span class="o">*=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">2</span>
            <span class="n">points</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">pos</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> 
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">get_im</span><span class="p">(</span><span class="n">e0</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">res</span><span class="p">):</span>
        <span class="n">xn</span> <span class="o">=</span> <span class="n">make_base4_im</span><span class="p">.</span><span class="n">get_xn</span><span class="p">(</span><span class="n">make_base4_im</span><span class="p">.</span><span class="n">get_x0</span><span class="p">(</span><span class="n">e0</span><span class="p">),</span> <span class="n">res</span><span class="p">)</span>
        <span class="n">points</span> <span class="o">=</span> <span class="n">make_base4_im</span><span class="p">.</span><span class="n">get_points</span><span class="p">(</span><span class="n">xn</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="s">"RGB"</span><span class="p">,</span> <span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="s">"#FFFFFF"</span><span class="p">)</span>
        <span class="n">pixels</span> <span class="o">=</span> <span class="n">im</span><span class="p">.</span><span class="n">load</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">point</span> <span class="ow">in</span> <span class="n">points</span><span class="p">:</span>
            <span class="n">pixels</span><span class="p">[</span><span class="nb">round</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">point</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">round</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">point</span><span class="p">[</span><span class="mi">1</span><span class="p">]))]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">make_base4_im</span><span class="p">.</span><span class="n">rgb_to_gray</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">rescale_im</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">image</span><span class="p">)</span> <span class="o">==</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">:</span>
            <span class="n">img_data</span> <span class="o">=</span> <span class="n">image</span>
            <span class="n">converted_im</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">(</span><span class="n">img_data</span><span class="p">).</span><span class="n">convert</span><span class="p">(</span><span class="s">"L"</span><span class="p">)</span>
            <span class="n">img_data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">converted_im</span><span class="p">.</span><span class="n">resize</span><span class="p">((</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="n">Image</span><span class="p">.</span><span class="n">ADAPTIVE</span><span class="p">))</span> <span class="c1">#resizing
</span>            <span class="k">return</span> <span class="n">img_data</span>

<span class="k">def</span> <span class="nf">make_e0</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">n_dbins</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">80</span><span class="p">):</span>
    
    
    <span class="k">def</span> <span class="nf">dim_root_estimate</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
        <span class="s">"""
        Takes a square matrix, and returns the dimension of the IFS generated by A
        
        Finds the root of the the function f(x) = spec_rad(A*(1/r)^d) - 1
        """</span>
        <span class="k">def</span> <span class="nf">spec_rad</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
            <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">eigvals</span><span class="p">(</span><span class="n">A</span><span class="p">)))</span>
    
        <span class="k">def</span> <span class="nf">dimension_root</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">A</span><span class="p">):</span> <span class="c1">#returns 0 when d is the dimension for A
</span>            <span class="s">"""
            Recalling that the dim of the IFS generated by A is the value d such 
            that spec_rad(A*(1/r)^d) = 1 (where r is the canonical scaling factor)
            """</span>
            <span class="k">return</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">spec_rad</span><span class="p">(</span><span class="n">A</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">power</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">)),</span> <span class="n">d</span><span class="p">))</span>
        
        <span class="n">estimate</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">optimize</span><span class="p">.</span><span class="n">newton</span><span class="p">(</span><span class="n">dimension_root</span><span class="p">,</span> <span class="n">x0</span> <span class="o">=</span> <span class="n">estimate</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="p">))</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        
    <span class="k">def</span> <span class="nf">get_dim_func</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">num_samples</span> <span class="o">=</span> <span class="mi">100</span><span class="p">):</span>
        <span class="s">"""
        Returns a function that converts dimensions into probabilities. 
        
        First we fit probabilities to dimension, then we return the inverse
        of the fitted function
        """</span>
        <span class="k">def</span> <span class="nf">generalized_exp</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span>
    
        <span class="k">def</span> <span class="nf">get_gumbel_l_distr</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="s">"""
            Get's the gumbel distribution parameters for a given p. 
            """</span>
            <span class="n">fit_vals</span> <span class="o">=</span> <span class="p">[]</span>
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_samples</span><span class="p">):</span>
                <span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ceil</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">base</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">p</span><span class="p">)))</span>
                <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">fit_vals</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">dim_root_estimate</span><span class="p">(</span><span class="n">A</span><span class="p">))</span>
            <span class="n">params</span> <span class="o">=</span> <span class="n">gumbel_l</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">fit_vals</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">params</span>
               
        
        <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">****************** Grabbing Exp. Params ******************</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Creating Data to Fit..."</span><span class="p">)</span>
        <span class="n">progress</span> <span class="o">=</span> <span class="n">progressbar</span><span class="p">(</span><span class="n">total</span> <span class="o">=</span> <span class="n">num_samples</span><span class="p">,</span> 
                               <span class="n">fmt</span> <span class="o">=</span> <span class="n">progressbar</span><span class="p">.</span><span class="n">FULL</span><span class="p">)</span>
        
        <span class="n">probs</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">num_samples</span><span class="p">)</span>
        <span class="n">fit_data</span> <span class="o">=</span> <span class="p">[]</span>
    
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">probs</span><span class="p">:</span>
            <span class="n">progress</span><span class="p">.</span><span class="n">current</span> <span class="o">+=</span><span class="mi">1</span> 
            <span class="n">progress</span><span class="p">.</span><span class="n">__call__</span><span class="p">()</span>
            
            <span class="k">try</span><span class="p">:</span>
                <span class="n">temp_avg_dim</span> <span class="o">=</span> <span class="n">get_gumbel_l_distr</span><span class="p">(</span><span class="n">p</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">fit_data</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">p</span><span class="p">,</span> <span class="n">temp_avg_dim</span><span class="p">])</span>
            <span class="k">except</span><span class="p">:</span>
                <span class="k">pass</span>
        
        <span class="n">fit_data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">fit_data</span><span class="p">)</span>
        
        <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Fitting generalized_exp(p)..."</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">''</span><span class="p">)</span>
        <span class="n">expp</span> <span class="o">=</span> <span class="n">optimize</span><span class="p">.</span><span class="n">curve_fit</span><span class="p">(</span><span class="n">generalized_exp</span><span class="p">,</span> <span class="n">fit_data</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">fit_data</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">])</span>  
        <span class="k">print</span><span class="p">(</span><span class="s">"Done..."</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Probability $p$'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">"Dimension"</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Fitted Curve vs Target Values"</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">fit_data</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span> 
                    <span class="p">[</span><span class="n">generalized_exp</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">expp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">expp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">fit_data</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]],</span> 
                    <span class="n">label</span> <span class="o">=</span> <span class="s">'generalized_exp fit'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">fit_data</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span> 
                    <span class="n">fit_data</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'target vals'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span> <span class="o">=</span> <span class="s">'best'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Params: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">expp</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
        
        <span class="k">def</span> <span class="nf">dim_func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">expp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">b</span> <span class="o">=</span> <span class="n">expp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]):</span>
            <span class="s">"""
            The algebraic inverse of generalize_exp, with parameters tuned by the
            code above
            """</span>
            <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="n">b</span><span class="p">)</span><span class="o">/</span><span class="n">a</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>
            
        <span class="k">return</span> <span class="n">dim_func</span>
    
    <span class="n">dim_func</span> <span class="o">=</span> <span class="n">get_dim_func</span><span class="p">(</span><span class="n">base</span> <span class="o">=</span> <span class="n">base</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">****************** Making Encoding Matrices ******************</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">trunc</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">digits</span> <span class="o">=</span> <span class="mi">3</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="nb">float</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">round</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">digits</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">bins</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">dx</span> <span class="o">=</span> <span class="mi">2</span><span class="o">/</span><span class="n">n</span>
        <span class="k">return</span> <span class="p">[[</span><span class="n">i</span><span class="o">*</span><span class="n">dx</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">dx</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
    
    <span class="n">set_of_bins</span> <span class="o">=</span> <span class="n">bins</span><span class="p">(</span><span class="n">n_dbins</span><span class="p">)</span>
    <span class="n">set_of_p</span> <span class="o">=</span> <span class="p">[</span><span class="n">dim_func</span><span class="p">(</span><span class="n">bk</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">/</span><span class="n">n_dbins</span><span class="p">)</span> <span class="k">for</span> <span class="n">bk</span> <span class="ow">in</span> <span class="n">set_of_bins</span><span class="p">]</span>
    <span class="n">bins_of_E</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_dbins</span><span class="p">)]</span>
    <span class="n">set_of_dims</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">i</span><span class="o">=</span><span class="mi">2</span> <span class="c1">#skip the first bin because it's just all zeroes
</span>    
    <span class="k">print</span><span class="p">(</span><span class="s">"Filling bins..."</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">set_of_bins</span><span class="p">):</span>
        <span class="n">bk</span> <span class="o">=</span> <span class="n">set_of_bins</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="o">-</span><span class="n">set_of_p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">E</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ceil</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">base</span><span class="p">)</span> <span class="o">-</span> <span class="n">p</span><span class="p">))</span>
        <span class="n">dim</span> <span class="o">=</span> <span class="n">dim_root_estimate</span><span class="p">(</span><span class="n">E</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">dim</span> <span class="o">&gt;=</span> <span class="n">bk</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">and</span> <span class="n">dim</span> <span class="o">&lt;=</span> <span class="n">bk</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">bins_of_E</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">E</span><span class="p">)</span>
            <span class="n">set_of_dims</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">dim</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">bins_of_E</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&gt;=</span> <span class="n">l</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Bin {} out of {}: [{}, {}]"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> 
                                                      <span class="n">n_dbins</span><span class="p">,</span> 
                                                      <span class="n">trunc</span><span class="p">(</span><span class="n">bk</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> 
                                                      <span class="n">trunc</span><span class="p">(</span><span class="n">bk</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
            
    <span class="n">plt</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">set_of_dims</span><span class="p">,</span> <span class="n">bins</span> <span class="o">=</span> <span class="mi">100</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Dimension"</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">"Count"</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Distribution of Dimensions in the Data Set"</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
    
    <span class="n">set_of_E</span> <span class="o">=</span> <span class="p">[</span><span class="n">E</span> <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">bins_of_E</span> <span class="k">for</span> <span class="n">E</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">]</span> 
    
    <span class="k">print</span><span class="p">(</span><span class="s">"Done!"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">set_of_E</span>

</code></pre></div></div>
:ET