I"â∆<p><img src="/img/posts/linkage/example_linkage.png" alt="png" /></p>

<h1 id="overview">Overview:</h1>

<p>I created a library of functions which creates and manipulates linkage structures, some examples above. Each linkage structure is defined as a collection of quads, with each quad a four dimensional vector with elements representing the lengths of a simple quad-linkage. Upon fixing one terminal anchor point and articulating the other anchor point, each linkage structure draws its‚Äô own unique trace. In this project, I developed a method of ‚Äúgrowing‚Äù linkage structures which produce a provided trace.</p>

<h1 id="results">Results:</h1>

<p>The input was a collection of points which when plotted draw a heart, and the output was two linkage structures whose traces together draw a heart! However, the code is capable of taking any number of traces from which linkage structures can be grown to approximate them. Below is an example output. You can find a link to the repo where I maintain this code <a href="">here</a>.</p>

<p><img src="/img/posts/linkage/linkageheart1.png" alt="png" />
<img src="/img/posts/linkage/linkageheart2.png" alt="png" />
<img src="/img/posts/linkage/linkageheart3.png" alt="png" /></p>

<h1 id="code-walkthrough">Code Walkthrough:</h1>

<p>Below is just the library of functions I created in order to efficiently grown traces. The first few methods deal with computing the operating range of any general linkage structure, since when we create linkage structures at random, there is no guarantee that the trace will be well defined.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">import</span> <span class="n">matplotlib</span><span class="p">.</span><span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">import</span> <span class="n">intervals</span> <span class="k">as</span> <span class="n">I</span>

<span class="k">from</span> <span class="n">pylab</span> <span class="n">import</span> <span class="n">rcParams</span>

<span class="k">from</span> <span class="n">numba</span> <span class="n">import</span> <span class="n">njit</span>
<span class="k">from</span> <span class="n">functools</span> <span class="n">import</span> <span class="k">partial</span>

<span class="n">plt</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="err">'</span><span class="n">animation</span><span class="p">.</span><span class="n">ffmpeg_path</span><span class="err">'</span><span class="p">]</span> <span class="p">=</span> <span class="err">'</span><span class="p">/</span><span class="n">usr</span><span class="p">/</span><span class="n">bin</span><span class="p">/</span><span class="n">ffmpeg</span><span class="err">'</span>
<span class="n">rcParams</span><span class="p">[</span><span class="err">'</span><span class="n">figure</span><span class="p">.</span><span class="n">figsize</span><span class="err">'</span><span class="p">]</span> <span class="p">=</span> <span class="m">15</span><span class="p">,</span> <span class="m">15</span>

<span class="s">"""
</span><span class="n">A</span> <span class="k">set</span> <span class="n">of</span> <span class="n">functions</span> <span class="n">that</span> <span class="n">allow</span> <span class="n">us</span> <span class="n">to</span> <span class="n">instantiate</span> <span class="n">linkages</span><span class="p">,</span> <span class="k">as</span> <span class="n">well</span> <span class="k">as</span> 
<span class="n">draw</span> <span class="n">the</span> <span class="n">traces</span> <span class="k">for</span> <span class="n">those</span> <span class="n">linkages</span><span class="p">.</span> 
<span class="s">"""
</span>
<span class="n">def</span> <span class="nf">F_L</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">tol</span> <span class="p">=</span> <span class="m">1e-5</span><span class="p">):</span>
    <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">l3</span><span class="p">,</span> <span class="n">l4</span> <span class="p">=</span> <span class="n">L</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">L</span><span class="p">[</span><span class="m">1</span><span class="p">],</span> <span class="n">L</span><span class="p">[</span><span class="m">2</span><span class="p">],</span> <span class="n">L</span><span class="p">[</span><span class="m">3</span><span class="p">]</span>
    <span class="n">tp2</span> <span class="p">=</span> <span class="n">l4</span><span class="p">**</span><span class="m">2</span> <span class="p">+</span> <span class="n">l3</span><span class="p">**</span><span class="m">2</span> <span class="p">-</span> <span class="p">((</span><span class="n">l4</span><span class="p">*</span><span class="n">l3</span><span class="p">*(</span><span class="n">l1</span><span class="p">**</span><span class="m">2</span> <span class="p">+</span> <span class="n">l2</span><span class="p">**</span><span class="m">2</span> <span class="p">-</span> <span class="n">t</span><span class="p">**</span><span class="m">2</span><span class="p">))/(</span><span class="n">l1</span><span class="p">*</span><span class="n">l2</span><span class="p">))</span>
    
    <span class="err">#</span><span class="n">edge</span> <span class="n">cases</span> 
    <span class="k">if</span> <span class="n">t</span> <span class="p">&lt;=</span> <span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">l1</span><span class="p">-</span><span class="n">l2</span><span class="p">)+</span><span class="n">tol</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">l3</span><span class="p">-</span><span class="n">l4</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">t</span> <span class="p">&gt;=</span> <span class="n">l2</span><span class="p">+</span><span class="n">l1</span><span class="p">-</span><span class="n">tol</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">l3</span><span class="p">+</span><span class="n">l4</span>
    
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">tp2</span><span class="p">)</span>

<span class="n">def</span> <span class="nf">F_inv_L</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">L</span><span class="p">):</span>
    <span class="err">#</span><span class="n">inverse</span> <span class="n">of</span> <span class="n">F_L</span> <span class="k">is</span> <span class="n">the</span> <span class="n">same</span> <span class="k">as</span> <span class="n">a</span> <span class="n">tower</span> <span class="n">with</span> <span class="n">rotated</span> <span class="n">lengths</span>
    <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">l3</span><span class="p">,</span> <span class="n">l4</span> <span class="p">=</span> <span class="n">L</span>
    
    <span class="k">return</span> <span class="nf">F_L</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">L</span> <span class="p">=</span> <span class="p">[</span><span class="n">l4</span><span class="p">,</span> <span class="n">l3</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">l1</span><span class="p">])</span>

<span class="n">def</span> <span class="nf">down</span><span class="p">(</span><span class="n">L</span><span class="p">):</span>
    <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="p">=</span> <span class="n">L</span>
    <span class="k">return</span> <span class="p">[</span><span class="nf">abs</span><span class="p">(</span><span class="n">l1</span> <span class="p">-</span> <span class="n">l2</span><span class="p">),</span> <span class="n">l1</span><span class="p">+</span><span class="n">l2</span><span class="p">]</span>

<span class="n">def</span> <span class="nf">up</span><span class="p">(</span><span class="n">L</span><span class="p">):</span>
    <span class="n">_</span> <span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">l3</span><span class="p">,</span> <span class="n">l4</span> <span class="p">=</span> <span class="n">L</span>
    <span class="k">return</span> <span class="p">[</span><span class="nf">abs</span><span class="p">(</span><span class="n">l3</span> <span class="p">-</span> <span class="n">l4</span><span class="p">),</span> <span class="n">l3</span><span class="p">+</span><span class="n">l4</span><span class="p">]</span>

<span class="n">def</span> <span class="nf">intersection</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
    <span class="s">"""
</span>    <span class="n">Returns</span> <span class="n">the</span> <span class="n">intersection</span> <span class="n">of</span> <span class="n">A</span> <span class="n">and</span> <span class="nf">B</span> <span class="p">(</span><span class="n">subsets</span> <span class="n">of</span> <span class="n">the</span> <span class="n">real</span> <span class="n">numbers</span><span class="p">)</span>
    <span class="s">"""
</span>    <span class="n">AcapB</span> <span class="p">=</span> <span class="n">I</span><span class="p">.</span><span class="nf">closed</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="m">1</span><span class="p">])</span> <span class="p">&amp;</span> <span class="n">I</span><span class="p">.</span><span class="nf">closed</span><span class="p">(</span><span class="n">B</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">B</span><span class="p">[</span><span class="m">1</span><span class="p">])</span>
    
    <span class="k">if</span> <span class="n">AcapB</span><span class="p">.</span><span class="n">lower</span> <span class="p">==</span> <span class="n">I</span><span class="p">.</span><span class="nf">_PInf</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">None</span> <span class="err">#</span><span class="n">here</span><span class="p">,</span> <span class="n">None</span> <span class="n">indicates</span> <span class="n">that</span> <span class="n">the</span> <span class="n">intersection</span> <span class="k">is</span> <span class="n">empty</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">AcapB</span><span class="p">.</span><span class="n">lower</span><span class="p">,</span> <span class="n">AcapB</span><span class="p">.</span><span class="n">upper</span><span class="p">]</span>

<span class="n">def</span> <span class="nf">compose</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nf">f</span><span class="p">(</span><span class="nf">g</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>

<span class="n">def</span> <span class="nf">get_1tow_attrs</span><span class="p">(</span><span class="n">L0</span><span class="p">):</span>
    
    <span class="n">T</span> <span class="p">=</span> <span class="nf">down</span><span class="p">(</span><span class="n">L0</span><span class="p">)</span>
    <span class="n">FF</span> <span class="p">=</span> <span class="k">partial</span><span class="p">(</span><span class="n">F_L</span><span class="p">,</span> <span class="n">L</span> <span class="p">=</span> <span class="n">L0</span><span class="p">)</span>
    <span class="n">Tpp</span> <span class="p">=</span> <span class="nf">up</span><span class="p">(</span><span class="n">L0</span><span class="p">)</span>
    <span class="n">FpFp</span> <span class="p">=</span> <span class="k">partial</span><span class="p">(</span><span class="n">F_inv_L</span><span class="p">,</span> <span class="n">L</span> <span class="p">=</span> <span class="n">L0</span><span class="p">)</span>
                   
    <span class="k">return</span> <span class="p">{</span><span class="s">"T"</span><span class="p">:</span><span class="n">T</span><span class="p">,</span> 
            <span class="s">"Tpp"</span><span class="p">:</span><span class="n">Tpp</span><span class="p">,</span> 
            <span class="s">"FF"</span><span class="p">:</span><span class="n">FF</span><span class="p">,</span>
            <span class="s">"FpFp"</span><span class="p">:</span><span class="n">FpFp</span><span class="p">}</span>

<span class="n">def</span> <span class="nf">align_attr</span><span class="p">(</span><span class="n">attr0</span><span class="p">,</span> <span class="n">attr1</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">k</span> <span class="p">=</span> <span class="nf">intersection</span><span class="p">(</span><span class="n">attr0</span><span class="p">[</span><span class="s">"Tpp"</span><span class="p">],</span> <span class="n">attr1</span><span class="p">[</span><span class="s">"T"</span><span class="p">])</span>
        <span class="n">T</span> <span class="p">=</span> <span class="p">[</span><span class="n">attr0</span><span class="p">[</span><span class="s">"FpFp"</span><span class="p">](</span><span class="n">k</span><span class="p">[</span><span class="m">0</span><span class="p">]),</span> <span class="n">attr0</span><span class="p">[</span><span class="s">"FpFp"</span><span class="p">](</span><span class="n">k</span><span class="p">[</span><span class="m">1</span><span class="p">])]</span>
    <span class="n">except</span> <span class="n">TypeError</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">None</span>
    
    <span class="n">FpFp</span> <span class="p">=</span> <span class="nf">compose</span><span class="p">(</span><span class="n">attr0</span><span class="p">[</span><span class="s">"FpFp"</span><span class="p">],</span> <span class="n">attr1</span><span class="p">[</span><span class="s">"FpFp"</span><span class="p">])</span>
    
    <span class="n">FF</span> <span class="p">=</span> <span class="nf">compose</span><span class="p">(</span><span class="n">attr1</span><span class="p">[</span><span class="s">"FF"</span><span class="p">],</span> <span class="n">attr0</span><span class="p">[</span><span class="s">"FF"</span><span class="p">])</span>
    
    <span class="n">Tpp</span> <span class="p">=</span> <span class="p">[</span><span class="nf">FF</span><span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="m">0</span><span class="p">]),</span> <span class="nf">FF</span><span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="m">1</span><span class="p">])]</span>
    
    <span class="k">return</span> <span class="p">{</span><span class="s">"T"</span><span class="p">:</span><span class="n">T</span><span class="p">,</span> 
            <span class="s">"Tpp"</span><span class="p">:</span><span class="n">Tpp</span><span class="p">,</span> 
            <span class="s">"FF"</span><span class="p">:</span><span class="n">FF</span><span class="p">,</span>
            <span class="s">"FpFp"</span><span class="p">:</span><span class="n">FpFp</span><span class="p">}</span>

    
<span class="n">def</span> <span class="nf">get_t</span><span class="p">(</span><span class="n">lengths</span><span class="p">):</span>
    
    <span class="n">attrs</span> <span class="p">=</span> <span class="p">[</span><span class="nf">get_1tow_attrs</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> <span class="k">for</span> <span class="n">L</span> <span class="k">in</span> <span class="n">lengths</span><span class="p">]</span>
    
    <span class="k">while</span> <span class="nf">len</span><span class="p">(</span><span class="n">attrs</span><span class="p">)&gt;</span><span class="m">1</span><span class="p">:</span>
        <span class="n">new_attrs</span> <span class="p">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="nf">range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">attrs</span><span class="p">)-</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">):</span>
            <span class="n">new_attrs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">align_attr</span><span class="p">(</span><span class="n">attrs</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">attrs</span><span class="p">[</span><span class="n">i</span><span class="p">+</span><span class="m">1</span><span class="p">]))</span>
        <span class="n">attrs</span> <span class="p">=</span> <span class="n">new_attrs</span>
        
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">attrs</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="s">"T"</span><span class="p">]</span>
    <span class="n">except</span> <span class="n">TypeError</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">None</span>


<span class="n">def</span> <span class="nf">norm</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">x</span><span class="p">**</span><span class="m">2</span> <span class="p">+</span> <span class="n">y</span><span class="p">**</span><span class="m">2</span><span class="p">)</span>

<span class="n">@njit</span>
<span class="n">def</span> <span class="nf">get_tri</span><span class="p">(</span><span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">l0</span><span class="p">,</span> <span class="n">l1</span><span class="p">):</span>
    <span class="sc">'''</span>
    <span class="n">a</span> <span class="n">basic</span> <span class="n">way</span> <span class="n">to</span> <span class="n">solve</span> <span class="k">for</span> <span class="n">the</span> <span class="n">final</span> <span class="n">coordinate</span> <span class="n">of</span> <span class="n">a</span> <span class="n">triangle</span> <span class="n">defined</span> <span class="k">by</span> <span class="n">SSS</span>
    
    <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span> <span class="n">are</span> <span class="n">numpy</span> <span class="n">arrays</span> <span class="n">representing</span> <span class="n">the</span> <span class="m">2D</span> <span class="n">location</span> <span class="n">of</span> <span class="n">the</span>
    <span class="n">points</span> <span class="n">of</span> <span class="n">the</span> <span class="n">linkage</span><span class="p">.</span> 
    
    <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span> <span class="n">are</span> <span class="n">the</span> <span class="n">side</span> <span class="n">lengths</span> <span class="k">in</span> <span class="n">question</span>
    
    <span class="n">Returns</span> <span class="n">the</span> <span class="n">left</span><span class="p">-</span><span class="n">handed</span> <span class="n">solution</span> <span class="n">to</span> <span class="n">the</span> <span class="n">triangle</span> <span class="n">problem</span><span class="p">,</span> 
    <span class="k">if</span> <span class="n">the</span> <span class="n">solution</span> <span class="n">doesn</span><span class="err">'</span><span class="n">t</span> <span class="n">exist</span><span class="p">,</span> <span class="n">then</span> <span class="n">it</span> <span class="n">will</span> <span class="k">return</span> <span class="n">none</span><span class="p">.</span>
    <span class="sc">'''</span>
    
    <span class="err">#</span> <span class="k">if</span> <span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">p0</span><span class="p">)</span> <span class="p">==</span> <span class="nf">type</span><span class="p">(</span><span class="n">None</span><span class="p">))</span> <span class="nf">or</span> <span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">p1</span><span class="p">)</span> <span class="p">==</span> <span class="nf">type</span><span class="p">(</span><span class="n">None</span><span class="p">)):</span>
    <span class="err">#</span>     <span class="k">return</span> <span class="n">None</span>
    
    <span class="n">x0</span><span class="p">,</span> <span class="n">y0</span> <span class="p">=</span> <span class="n">p0</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">p0</span><span class="p">[</span><span class="m">1</span><span class="p">]</span>
    <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span> <span class="p">=</span> <span class="n">p1</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">p1</span><span class="p">[</span><span class="m">1</span><span class="p">]</span>
    
    <span class="n">d</span> <span class="p">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">((</span><span class="n">x0</span> <span class="p">-</span> <span class="n">x1</span><span class="p">)**</span><span class="m">2</span> <span class="p">+</span>  <span class="p">(</span><span class="n">y0</span> <span class="p">-</span> <span class="n">y1</span><span class="p">)**</span><span class="m">2</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">d</span> <span class="p">&gt;</span> <span class="n">l0</span> <span class="p">+</span> <span class="n">l1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">None</span>
    
    <span class="n">a</span> <span class="p">=</span> <span class="p">(</span><span class="n">l0</span><span class="p">**</span><span class="m">2</span> <span class="p">-</span> <span class="n">l1</span><span class="p">**</span><span class="m">2</span> <span class="p">+</span> <span class="n">d</span><span class="p">**</span><span class="m">2</span><span class="p">)/(</span><span class="m">2</span><span class="p">*</span><span class="n">d</span><span class="p">)</span>
    <span class="n">h</span> <span class="p">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">l0</span><span class="p">**</span><span class="m">2</span> <span class="p">-</span> <span class="n">a</span><span class="p">**</span><span class="m">2</span><span class="p">)</span>
    
    <span class="n">x2</span> <span class="p">=</span> <span class="n">x0</span> <span class="p">+</span> <span class="n">a</span><span class="p">*(</span><span class="n">x1</span> <span class="p">-</span> <span class="n">x0</span><span class="p">)/</span><span class="n">d</span>
    <span class="n">y2</span> <span class="p">=</span> <span class="n">y0</span> <span class="p">+</span> <span class="n">a</span><span class="p">*(</span><span class="n">y1</span> <span class="p">-</span> <span class="n">y0</span><span class="p">)/</span><span class="n">d</span>
    
    <span class="n">x3</span> <span class="p">=</span> <span class="n">x2</span> <span class="p">-</span> <span class="n">h</span><span class="p">*(</span><span class="n">y1</span> <span class="p">-</span> <span class="n">y0</span><span class="p">)/</span><span class="n">d</span>
    <span class="n">y3</span> <span class="p">=</span> <span class="n">y2</span> <span class="p">+</span> <span class="n">h</span><span class="p">*(</span><span class="n">x1</span> <span class="p">-</span> <span class="n">x0</span><span class="p">)/</span><span class="n">d</span>
    
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">asarray</span><span class="p">([</span><span class="n">x3</span><span class="p">,</span> <span class="n">y3</span><span class="p">])</span>


<span class="n">def</span> <span class="nf">get_quad</span><span class="p">(</span><span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">L</span><span class="p">):</span>
    <span class="s">"""
</span>    <span class="n">p0</span><span class="p">,</span> <span class="n">p1</span> <span class="n">are</span> <span class="n">the</span> <span class="n">anchor</span> <span class="n">points</span>
    
    <span class="n">L</span> <span class="k">is</span> <span class="n">a</span> <span class="n">list</span> <span class="n">of</span> <span class="n">four</span> <span class="n">lengths</span><span class="p">.</span> 
    
    <span class="n">This</span> <span class="n">basically</span> <span class="n">just</span> <span class="n">makes</span> <span class="n">the</span> <span class="n">scissor</span> <span class="n">shaped</span> <span class="n">thing</span>
    <span class="s">"""
</span>    <span class="n">l0</span><span class="p">,</span> <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">l3</span> <span class="p">=</span> <span class="n">L</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">L</span><span class="p">[</span><span class="m">1</span><span class="p">],</span> <span class="n">L</span><span class="p">[</span><span class="m">2</span><span class="p">],</span> <span class="n">L</span><span class="p">[</span><span class="m">3</span><span class="p">]</span>
    <span class="n">pC</span> <span class="p">=</span> <span class="nf">get_tri</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">p0</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">p1</span><span class="p">),</span> <span class="n">l0</span><span class="p">,</span> <span class="n">l1</span><span class="p">)</span>
    
    <span class="n">norm_p1_pC</span> <span class="p">=</span> <span class="p">(</span><span class="n">pC</span><span class="p">-</span><span class="n">p1</span><span class="p">)</span> <span class="p">/</span> <span class="nf">norm</span><span class="p">(</span><span class="n">pC</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">-</span> <span class="n">p1</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">pC</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">-</span> <span class="n">p1</span><span class="p">[</span><span class="m">1</span><span class="p">])</span>
    <span class="n">norm_p0_pC</span> <span class="p">=</span> <span class="p">(</span><span class="n">pC</span><span class="p">-</span><span class="n">p0</span><span class="p">)</span> <span class="p">/</span> <span class="nf">norm</span><span class="p">(</span><span class="n">pC</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">-</span> <span class="n">p0</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">pC</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">-</span> <span class="n">p0</span><span class="p">[</span><span class="m">1</span><span class="p">])</span>
    
    <span class="n">p2</span> <span class="p">=</span> <span class="p">(</span><span class="n">norm_p0_pC</span><span class="p">*(</span><span class="n">l0</span><span class="p">+</span><span class="n">l2</span><span class="p">))</span> <span class="p">+</span> <span class="n">p0</span>
    <span class="n">p3</span> <span class="p">=</span> <span class="p">(</span><span class="n">norm_p1_pC</span><span class="p">*(</span><span class="n">l1</span><span class="p">+</span><span class="n">l3</span><span class="p">))</span> <span class="p">+</span> <span class="n">p1</span>

    <span class="k">return</span> <span class="n">p2</span><span class="p">,</span> <span class="n">p3</span>

<span class="n">def</span> <span class="nf">get_tower</span><span class="p">(</span><span class="n">lengths</span><span class="p">,</span> <span class="n">p0</span> <span class="p">=</span> <span class="p">[</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">],</span> <span class="n">p1</span> <span class="p">=</span> <span class="n">None</span><span class="p">):</span>
    
    <span class="k">try</span><span class="p">:</span>
        <span class="n">T</span> <span class="p">=</span> <span class="nf">get_t</span><span class="p">(</span><span class="n">lengths</span><span class="p">)</span>
    <span class="n">except</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">None</span>
    
    <span class="k">if</span> <span class="n">T</span> <span class="k">is</span> <span class="n">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">None</span>
    
    <span class="n">t</span> <span class="p">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">-</span> <span class="n">T</span><span class="p">[</span><span class="m">1</span><span class="p">])</span>
    
    <span class="n">D</span> <span class="p">=</span> <span class="nf">down</span><span class="p">(</span><span class="n">lengths</span><span class="p">[</span><span class="m">0</span><span class="p">])</span>
    <span class="n">d</span> <span class="p">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">D</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">-</span> <span class="n">D</span><span class="p">[</span><span class="m">1</span><span class="p">])</span>

    <span class="err">#</span><span class="n">note</span> <span class="n">T</span> <span class="k">is</span> <span class="n">a</span> <span class="n">subset</span> <span class="n">of</span> <span class="n">D</span>
    <span class="k">if</span> <span class="n">t</span><span class="p">/</span><span class="n">d</span> <span class="p">&lt;</span> <span class="m">0.01</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">None</span>
    
    <span class="k">if</span> <span class="nf">type</span><span class="p">(</span><span class="n">p1</span><span class="p">)</span> <span class="p">==</span> <span class="nf">type</span><span class="p">(</span><span class="n">None</span><span class="p">):</span>
        <span class="n">p1</span> <span class="p">=</span> <span class="p">[</span><span class="m">0.5</span><span class="p">*(</span><span class="n">T</span><span class="p">[</span><span class="m">0</span><span class="p">]+</span><span class="n">T</span><span class="p">[</span><span class="m">1</span><span class="p">]),</span> <span class="m">0</span><span class="p">]</span>
    
    <span class="k">try</span><span class="p">:</span>
        <span class="n">p2</span><span class="p">,</span> <span class="n">p3</span> <span class="p">=</span> <span class="nf">get_quad</span><span class="p">(</span><span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">lengths</span><span class="p">[</span><span class="m">0</span><span class="p">])</span>
    <span class="n">except</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">None</span>
    
    <span class="n">tower_verts</span> <span class="p">=</span> <span class="p">[</span><span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">p3</span><span class="p">]</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span> <span class="p">==</span> <span class="nf">type</span><span class="p">(</span><span class="n">None</span><span class="p">))</span> <span class="nf">or</span> <span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">p3</span><span class="p">)</span> <span class="p">==</span> <span class="nf">type</span><span class="p">(</span><span class="n">None</span><span class="p">)):</span>
        <span class="k">return</span> <span class="n">None</span>
    
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">L</span> <span class="k">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lengths</span><span class="p">[</span><span class="m">1</span><span class="p">:]):</span>
        <span class="k">if</span> <span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span> <span class="p">==</span> <span class="nf">type</span><span class="p">(</span><span class="n">None</span><span class="p">))</span> <span class="nf">or</span> <span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">p3</span><span class="p">)</span> <span class="p">==</span> <span class="nf">type</span><span class="p">(</span><span class="n">None</span><span class="p">)):</span>
            <span class="k">return</span> <span class="n">None</span>
        
        <span class="k">if</span> <span class="n">i</span><span class="p">%</span><span class="m">2</span> <span class="p">==</span> <span class="m">0</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">p3</span><span class="p">,</span> <span class="n">p2</span> <span class="p">=</span> <span class="nf">get_quad</span><span class="p">(</span><span class="n">p3</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span>
            <span class="n">except</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">p2</span><span class="p">,</span> <span class="n">p3</span> <span class="p">=</span> <span class="nf">get_quad</span><span class="p">(</span><span class="n">p2</span><span class="p">,</span> <span class="n">p3</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span>
            <span class="n">except</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">None</span>
        
        <span class="n">tower_verts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span>
        <span class="n">tower_verts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p3</span><span class="p">)</span>
    
    
    <span class="n">tower_verts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">get_tri</span><span class="p">((</span><span class="n">tower_verts</span><span class="p">[-</span><span class="m">1</span><span class="p">],</span> 
                                <span class="n">tower_verts</span><span class="p">[-</span><span class="m">2</span><span class="p">])[</span><span class="nf">len</span><span class="p">(</span><span class="n">lengths</span><span class="p">)%</span><span class="m">2</span> <span class="p">==</span> <span class="m">0</span><span class="p">],</span> 
                               <span class="p">(</span><span class="n">tower_verts</span><span class="p">[-</span><span class="m">2</span><span class="p">],</span> 
                                <span class="n">tower_verts</span><span class="p">[-</span><span class="m">1</span><span class="p">])[</span><span class="nf">len</span><span class="p">(</span><span class="n">lengths</span><span class="p">)%</span><span class="m">2</span> <span class="p">==</span> <span class="m">0</span><span class="p">],</span> 
                               <span class="n">lengths</span><span class="p">[-</span><span class="m">1</span><span class="p">][-</span><span class="m">2</span><span class="p">],</span> 
                               <span class="n">lengths</span><span class="p">[-</span><span class="m">1</span><span class="p">][-</span><span class="m">1</span><span class="p">]))</span>

    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">asarray</span><span class="p">(</span><span class="n">tower_verts</span><span class="p">)</span>


<span class="n">def</span> <span class="nf">disp_tower</span><span class="p">(</span><span class="n">tower</span><span class="p">):</span>
    <span class="n">tower_verts</span> <span class="p">=</span> <span class="nf">get_tower</span><span class="p">(</span><span class="n">tower</span><span class="p">)</span>
    <span class="err">#</span><span class="n">takes</span> <span class="n">the</span> <span class="n">vertices</span> <span class="n">of</span> <span class="n">a</span> <span class="n">tower</span> <span class="n">generated</span> <span class="k">by</span> <span class="n">get_tower</span>
    <span class="k">if</span> <span class="nf">type</span><span class="p">(</span><span class="n">tower_verts</span><span class="p">)</span> <span class="p">==</span> <span class="nf">type</span><span class="p">(</span><span class="n">None</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">None</span>
    
    <span class="n">y_points</span><span class="p">,</span> <span class="n">x_points</span> <span class="p">=</span> <span class="n">tower_verts</span><span class="p">[:,</span> <span class="m">1</span><span class="p">],</span> <span class="n">tower_verts</span><span class="p">[:,</span> <span class="m">0</span><span class="p">]</span>
    <span class="n">y_points</span><span class="p">,</span> <span class="n">x_points</span> <span class="p">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">y_points</span><span class="p">,</span> <span class="n">y_points</span><span class="p">[-</span><span class="m">1</span><span class="p">]),</span> <span class="n">np</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">x_points</span><span class="p">,</span> <span class="n">x_points</span><span class="p">[-</span><span class="m">1</span><span class="p">])</span>
    
    <span class="n">A0</span><span class="p">,</span> <span class="n">A1</span> <span class="p">=</span> <span class="n">tower_verts</span><span class="p">[</span><span class="m">1</span><span class="p">][::-</span><span class="m">1</span><span class="p">],</span> <span class="n">tower_verts</span><span class="p">[</span><span class="m">0</span><span class="p">][::-</span><span class="m">1</span><span class="p">]</span>
    
    <span class="n">c1</span> <span class="p">=</span> <span class="p">[(</span><span class="n">False</span><span class="p">,</span> <span class="n">True</span><span class="p">)[((</span><span class="n">i</span><span class="p">%</span><span class="m">4</span> <span class="p">==</span> <span class="m">3</span><span class="p">)</span> <span class="p">^</span> <span class="p">(</span><span class="n">i</span><span class="p">%</span><span class="m">4</span> <span class="p">==</span> <span class="m">1</span><span class="p">))]</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">x_points</span><span class="p">))]</span>
    <span class="n">c2</span> <span class="p">=</span> <span class="p">[(</span><span class="n">False</span><span class="p">,</span> <span class="n">True</span><span class="p">)[((</span><span class="n">i</span><span class="p">%</span><span class="m">4</span> <span class="p">==</span> <span class="m">2</span><span class="p">)</span> <span class="p">^</span> <span class="p">(</span><span class="n">i</span><span class="p">%</span><span class="m">4</span> <span class="p">==</span> <span class="m">0</span><span class="p">))]</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">x_points</span><span class="p">))]</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">x_points</span><span class="p">,</span> <span class="n">y_points</span><span class="p">,</span> <span class="n">s</span> <span class="p">=</span> <span class="m">100</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">([</span><span class="n">A0</span><span class="p">[</span><span class="m">1</span><span class="p">],</span> <span class="n">A1</span><span class="p">[</span><span class="m">1</span><span class="p">]],</span> <span class="p">[</span><span class="n">A0</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">A1</span><span class="p">[</span><span class="m">0</span><span class="p">]],</span> <span class="n">s</span> <span class="p">=</span> <span class="m">100</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_points</span><span class="p">[</span><span class="n">c2</span><span class="p">],</span> <span class="n">y_points</span><span class="p">[</span><span class="n">c2</span><span class="p">])</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_points</span><span class="p">[</span><span class="n">c1</span><span class="p">],</span> <span class="n">y_points</span><span class="p">[</span><span class="n">c1</span><span class="p">])</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">axis</span><span class="p">(</span><span class="s">"scaled"</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">axis</span><span class="p">(</span><span class="s">"square"</span><span class="p">)</span>

<span class="n">def</span> <span class="nf">get_trace</span><span class="p">(</span><span class="n">lengths</span><span class="p">,</span> <span class="n">num_samples</span> <span class="p">=</span> <span class="m">800</span><span class="p">,</span> <span class="n">p0</span> <span class="p">=</span> <span class="p">[</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">]):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">T</span> <span class="p">=</span> <span class="nf">get_t</span><span class="p">(</span><span class="n">lengths</span><span class="p">)</span>
    <span class="n">except</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">None</span>
    
    <span class="k">if</span> <span class="n">T</span> <span class="k">is</span> <span class="n">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">None</span>
    
    <span class="n">points</span> <span class="p">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">d</span> <span class="k">in</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="m">0</span><span class="p">]+</span><span class="m">0.0001</span><span class="p">,</span> <span class="n">T</span><span class="p">[</span><span class="m">1</span><span class="p">]-</span><span class="m">0.0001</span><span class="p">,</span> <span class="n">num_samples</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">tow</span> <span class="p">=</span> <span class="nf">get_tower</span><span class="p">(</span><span class="n">lengths</span><span class="p">,</span> 
                            <span class="n">p0</span> <span class="p">=</span> <span class="n">p0</span><span class="p">,</span> 
                            <span class="n">p1</span> <span class="p">=</span> <span class="p">[</span><span class="n">d</span><span class="p">,</span> <span class="m">0</span><span class="p">])</span>
            <span class="n">points</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tow</span><span class="p">[-</span><span class="m">1</span><span class="p">])</span>
            
        <span class="n">except</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
        

<span class="n">def</span> <span class="nf">disp_trace</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span>
               <span class="n">label</span> <span class="p">=</span> <span class="err">''</span><span class="p">,</span>
               <span class="n">cmap</span> <span class="p">=</span> <span class="err">'</span><span class="n">winter</span><span class="err">'</span><span class="p">,</span> 
               <span class="n">alpha</span> <span class="p">=</span> <span class="m">1</span><span class="p">):</span>
    
    <span class="k">if</span> <span class="n">trace</span> <span class="k">is</span> <span class="n">not</span> <span class="n">None</span><span class="p">:</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">trace</span><span class="p">[:,</span> <span class="m">0</span><span class="p">],</span> 
                    <span class="n">trace</span><span class="p">[:,</span> <span class="m">1</span><span class="p">],</span> 
                    <span class="n">c</span> <span class="p">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="n">num</span> <span class="p">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">trace</span><span class="p">)),</span>
                    <span class="n">label</span> <span class="p">=</span> <span class="n">label</span><span class="p">,</span>
                    <span class="n">cmap</span> <span class="p">=</span> <span class="n">cmap</span><span class="p">,</span> 
                    <span class="n">alpha</span> <span class="p">=</span> <span class="n">alpha</span><span class="p">,</span>
                    <span class="n">s</span> <span class="p">=</span> <span class="m">2</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">label</span> <span class="p">!=</span> <span class="err">''</span><span class="p">:</span>
            <span class="n">plt</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">(</span><span class="n">label</span> <span class="p">=</span> <span class="n">label</span><span class="p">)</span>

<span class="n">def</span> <span class="nf">disp_traces</span><span class="p">(</span><span class="n">traces</span><span class="p">,</span> 
                <span class="n">label</span> <span class="p">=</span> <span class="err">''</span><span class="p">,</span>
                <span class="n">cmap</span> <span class="p">=</span> <span class="err">'</span><span class="n">winter</span><span class="err">'</span><span class="p">):</span>
    
    <span class="k">for</span> <span class="n">trace</span> <span class="k">in</span> <span class="n">traces</span><span class="p">:</span>
        <span class="nf">disp_trace</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> 
                   <span class="n">label</span> <span class="p">=</span> <span class="err">''</span><span class="p">,</span>
                   <span class="n">cmap</span> <span class="p">=</span> <span class="err">'</span><span class="n">winter</span><span class="err">'</span><span class="p">)</span>
        

<span class="n">def</span> <span class="nf">disp_result</span><span class="p">(</span><span class="n">tower</span><span class="p">):</span>
    <span class="n">trace</span> <span class="p">=</span> <span class="nf">get_trace</span><span class="p">(</span><span class="n">tower</span><span class="p">)</span>
    
    <span class="nf">disp_trace</span><span class="p">(</span><span class="n">trace</span><span class="p">)</span>
    <span class="nf">disp_tower</span><span class="p">(</span><span class="n">tower</span><span class="p">)</span>
</code></pre></div></div>

:ET