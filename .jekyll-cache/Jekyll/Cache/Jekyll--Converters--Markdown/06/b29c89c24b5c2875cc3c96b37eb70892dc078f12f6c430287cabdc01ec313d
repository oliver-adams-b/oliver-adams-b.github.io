I"×Œ<h1 id="overview">Overview:</h1>

<p>It is trivial to construct the fractal-like attractor for an iterated function system, since each IFS defines a unique fractal. However the inverse of this problem is difficult in general; given an an attractor (in this case an image), what is the iterated function system that generates that attractor? This project constructs an IFS which approximates a provided image. The non-trivial part of this project was to construct a dataset for training a model. Using graph-directed constructions of fractals, a dataset of images with uniformly distributed fractal dimension was constructed.</p>

<h1 id="results">Results:</h1>

<p>Using a graph-directed construction of iterated function systems, we can define the IFS for a large class of fractals. Essentially, we can encode the IFS for a fractal using an adjacency matrix. From an adjacency matrix, we can construct an image. The dataset consists of matrices E0 and images which are generated by E0. A keras model was then trained to predict E0 from the image generated by E0, so that from arbitrary images we can retrieve the IFS which best approximates the provided image.</p>

<h1 id="code-walkthrough">Code Walkthrough</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib.pylab</span> <span class="kn">import</span> <span class="n">rcParams</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">from</span> <span class="nn">progress_bar</span> <span class="kn">import</span> <span class="n">progressbar</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">optimize</span>
<span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">gumbel_l</span>
<span class="kn">from</span> <span class="nn">statistics</span> <span class="kn">import</span> <span class="n">mean</span>
<span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="k">class</span> <span class="nc">make_base9_im</span><span class="p">():</span>
    <span class="s">'''
    This class converts E0 matrices into an image representing the IFS generated
    by E0 using the standard base 9 stuff.
    '''</span>
    <span class="n">e0</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">700</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">3</span>
    
    <span class="k">def</span> <span class="nf">get_x0</span><span class="p">(</span><span class="n">e0</span><span class="p">):</span>
        <span class="n">x0</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">e0</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">x0</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">x0</span>   
    
    <span class="k">def</span> <span class="nf">get_xn</span><span class="p">(</span><span class="n">x0</span><span class="p">,</span> <span class="n">str_length</span><span class="p">):</span>
        <span class="n">xn</span> <span class="o">=</span> <span class="n">x0</span> <span class="c1">#initialize Xn
</span>        <span class="k">for</span> <span class="n">loops</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">str_length</span><span class="p">):</span>
            <span class="n">xnplus1</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">xn</span><span class="p">:</span>
                <span class="n">last</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">x0</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">last</span><span class="p">:</span>
                        <span class="n">xnplus1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>    
            <span class="n">xn</span> <span class="o">=</span> <span class="n">xnplus1</span>       
        <span class="k">return</span> <span class="n">xn</span>
    
    <span class="k">def</span> <span class="nf">rgb_to_gray</span><span class="p">(</span><span class="n">rgb</span><span class="p">):</span> 
        <span class="n">rgb</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">rgb</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">rgb</span><span class="p">[...,:</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.2989</span><span class="p">,</span> <span class="mf">0.5870</span><span class="p">,</span> <span class="mf">0.1140</span><span class="p">]).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float64</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_points</span><span class="p">(</span><span class="n">xn</span><span class="p">):</span>
        <span class="n">points</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">route</span> <span class="ow">in</span> <span class="n">xn</span><span class="p">:</span>
            <span class="n">scale</span> <span class="o">=</span> <span class="mi">2</span><span class="o">/</span><span class="mi">3</span>
            <span class="n">pos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">route</span><span class="p">:</span>
                <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'0'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'1'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'2'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'3'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'4'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'5'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'6'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'7'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'8'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span> 
                <span class="n">dpos</span> <span class="o">=</span> <span class="n">dpos</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'float64'</span><span class="p">)</span>
                <span class="n">pos</span> <span class="o">+=</span> <span class="n">scale</span><span class="o">*</span><span class="n">dpos</span>
                <span class="n">scale</span> <span class="o">*=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">3</span>
            <span class="n">points</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">pos</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> 
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">get_im</span><span class="p">(</span><span class="n">e0</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">res</span><span class="p">):</span>
        <span class="n">xn</span> <span class="o">=</span> <span class="n">make_base9_im</span><span class="p">.</span><span class="n">get_xn</span><span class="p">(</span><span class="n">make_base9_im</span><span class="p">.</span><span class="n">get_x0</span><span class="p">(</span><span class="n">e0</span><span class="p">),</span> <span class="n">res</span><span class="p">)</span>
        <span class="n">points</span> <span class="o">=</span> <span class="n">make_base9_im</span><span class="p">.</span><span class="n">get_points</span><span class="p">(</span><span class="n">xn</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="s">"RGB"</span><span class="p">,</span> <span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="s">"#FFFFFF"</span><span class="p">)</span>
        <span class="n">pixels</span> <span class="o">=</span> <span class="n">im</span><span class="p">.</span><span class="n">load</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">point</span> <span class="ow">in</span> <span class="n">points</span><span class="p">:</span>
            <span class="n">pixels</span><span class="p">[</span><span class="nb">round</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">point</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">round</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">point</span><span class="p">[</span><span class="mi">1</span><span class="p">]))]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">make_base9_im</span><span class="p">.</span><span class="n">rgb_to_gray</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">rescale_im</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">image</span><span class="p">)</span> <span class="o">==</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">:</span>
            <span class="n">img_data</span> <span class="o">=</span> <span class="n">image</span>
            <span class="n">converted_im</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">(</span><span class="n">img_data</span><span class="p">).</span><span class="n">convert</span><span class="p">(</span><span class="s">"L"</span><span class="p">)</span>
            <span class="n">img_data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">converted_im</span><span class="p">.</span><span class="n">resize</span><span class="p">((</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="n">Image</span><span class="p">.</span><span class="n">ADAPTIVE</span><span class="p">))</span> <span class="c1">#resizing
</span>            <span class="k">return</span> <span class="n">img_data</span>

<span class="k">class</span> <span class="nc">make_base4_im</span><span class="p">():</span>
    <span class="s">'''
    This class converts E0 matrices into an image representing the IFS generated
    by E0 using the standard base 4 stuff.
    '''</span>
    <span class="n">e0</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">700</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">3</span>
    
    <span class="k">def</span> <span class="nf">get_x0</span><span class="p">(</span><span class="n">e0</span><span class="p">):</span>
        <span class="n">x0</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">e0</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">x0</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">x0</span>   
    
    <span class="k">def</span> <span class="nf">get_xn</span><span class="p">(</span><span class="n">x0</span><span class="p">,</span> <span class="n">str_length</span><span class="p">):</span>
        <span class="n">xn</span> <span class="o">=</span> <span class="n">x0</span> <span class="c1">#initialize Xn
</span>        <span class="k">for</span> <span class="n">loops</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">str_length</span><span class="p">):</span>
            <span class="n">xnplus1</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">xn</span><span class="p">:</span>
                <span class="n">last</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">x0</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">last</span><span class="p">:</span>
                        <span class="n">xnplus1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>    
            <span class="n">xn</span> <span class="o">=</span> <span class="n">xnplus1</span>       
        <span class="k">return</span> <span class="n">xn</span>
    
    <span class="k">def</span> <span class="nf">rgb_to_gray</span><span class="p">(</span><span class="n">rgb</span><span class="p">):</span> 
        <span class="n">rgb</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">rgb</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">rgb</span><span class="p">[...,:</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.2989</span><span class="p">,</span> <span class="mf">0.5870</span><span class="p">,</span> <span class="mf">0.1140</span><span class="p">]).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float64</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_points</span><span class="p">(</span><span class="n">xn</span><span class="p">):</span>
        <span class="n">points</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">route</span> <span class="ow">in</span> <span class="n">xn</span><span class="p">:</span>
            <span class="n">scale</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">2</span>
            <span class="n">pos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">route</span><span class="p">:</span>
                <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'0'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'1'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'2'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="s">'3'</span><span class="p">:</span>
                    <span class="n">dpos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
 
                <span class="n">dpos</span> <span class="o">=</span> <span class="n">dpos</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'float64'</span><span class="p">)</span>
                <span class="n">pos</span> <span class="o">+=</span> <span class="n">scale</span><span class="o">*</span><span class="n">dpos</span>
                <span class="n">scale</span> <span class="o">*=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">2</span>
            <span class="n">points</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">pos</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> 
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">get_im</span><span class="p">(</span><span class="n">e0</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">res</span><span class="p">):</span>
        <span class="n">xn</span> <span class="o">=</span> <span class="n">make_base4_im</span><span class="p">.</span><span class="n">get_xn</span><span class="p">(</span><span class="n">make_base4_im</span><span class="p">.</span><span class="n">get_x0</span><span class="p">(</span><span class="n">e0</span><span class="p">),</span> <span class="n">res</span><span class="p">)</span>
        <span class="n">points</span> <span class="o">=</span> <span class="n">make_base4_im</span><span class="p">.</span><span class="n">get_points</span><span class="p">(</span><span class="n">xn</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="s">"RGB"</span><span class="p">,</span> <span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="s">"#FFFFFF"</span><span class="p">)</span>
        <span class="n">pixels</span> <span class="o">=</span> <span class="n">im</span><span class="p">.</span><span class="n">load</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">point</span> <span class="ow">in</span> <span class="n">points</span><span class="p">:</span>
            <span class="n">pixels</span><span class="p">[</span><span class="nb">round</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">point</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">round</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">point</span><span class="p">[</span><span class="mi">1</span><span class="p">]))]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">make_base4_im</span><span class="p">.</span><span class="n">rgb_to_gray</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">rescale_im</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">image</span><span class="p">)</span> <span class="o">==</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">:</span>
            <span class="n">img_data</span> <span class="o">=</span> <span class="n">image</span>
            <span class="n">converted_im</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">(</span><span class="n">img_data</span><span class="p">).</span><span class="n">convert</span><span class="p">(</span><span class="s">"L"</span><span class="p">)</span>
            <span class="n">img_data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">converted_im</span><span class="p">.</span><span class="n">resize</span><span class="p">((</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="n">Image</span><span class="p">.</span><span class="n">ADAPTIVE</span><span class="p">))</span> <span class="c1">#resizing
</span>            <span class="k">return</span> <span class="n">img_data</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>We don't know the distribution of the dimensions for all fractals in nature, so we create
a data set that has an approximately uniform distribution of dimension. 

The goal here is to create a function that produces a list of E0 matrices, where the distribution
of the dimensions of all such E0 matrices is uniform. In this way we can create a data set that is
less biased towards any particular dimension (there are caveats with this). 

To create an E0 matrix, we create a random matrix [ceil(a_{i,j} - (1-p)]_{i,j &lt;= base} with a 
being a uniformly distributed random number in [0, 1]. The value p is constant, and controls how many
1's and 0's there are in E0. There isn't just one correct value to pick for p, since for
fixing p at some value gives a narrow distribution of dimensions for the IFS generated by E0. 
So the trick is to find a relationship between p and the dimension of E0 so that we can 
vary p to create a uniformly distributed (in dimension) training set.

When p = 1, then E0 will contain only 1's, and when p = 0, then E0 will contain only 0's

First we compute the relationship between p and the dimension of the IFS generated by E0, 
then we use the inverse of that relationship to create a set of E0 such that the dimensions 
of all E0 in the set are uniformly distributed.
</code></pre></div></div>

<p>```python
def make_e0(base, n_dbins = 20, l = 80):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def dim_root_estimate(A):
    """
    Takes a square matrix, and returns the dimension of the IFS generated by A
    
    Finds the root of the the function f(x) = spec_rad(A*(1/r)^d) - 1
    """
    def spec_rad(A):
        return max(np.abs(np.linalg.eigvals(A)))

    def dimension_root(d, A): #returns 0 when d is the dimension for A
        """
        Recalling that the dim of the IFS generated by A is the value d such 
        that spec_rad(A*(1/r)^d) = 1 (where r is the canonical scaling factor)
        """
        return 1 - spec_rad(A * np.power(1/np.sqrt(np.sqrt(A.size)), d))
    
    estimate = 1
    try:
        return optimize.newton(dimension_root, x0 = estimate, args = (A, ))
    except:
        return -1
    
def get_dim_func(base, num_samples = 100):
    """
    Returns a function that converts dimensions into probabilities. 
    
    First we fit probabilities to dimension, then we return the inverse
    of the fitted function
    """
    def generalized_exp(x, a, b):
        return np.log(a*x + b)

    def get_gumbel_l_distr(p):
        """
        Get's the gumbel distribution parameters for a given p. 
        """
        fit_vals = []
        
        for i in range(num_samples):
            A = np.abs(np.ceil(np.random.rand(base, base) - (1-p)))
            if np.max(A) != 0:
                fit_vals.append(dim_root_estimate(A))
        params = gumbel_l.fit(fit_vals)
        return params
           
    
    print("\n****************** Grabbing Exp. Params ******************\n")
    print("Creating Data to Fit...")
    progress = progressbar(total = num_samples, 
                           fmt = progressbar.FULL)
    
    probs = np.linspace(0.1, 1, num_samples)
    fit_data = []

    for p in probs:
        progress.current +=1 
        progress.__call__()
        
        try:
            temp_avg_dim = get_gumbel_l_distr(p)[0]
            fit_data.append([p, temp_avg_dim])
        except:
            pass
    
    fit_data = np.asarray(fit_data)
    
    print("\nFitting generalized_exp(p)...", end = '')
    expp = optimize.curve_fit(generalized_exp, fit_data[:, 0], fit_data[:, 1])  
    print("Done...")
    plt.xlabel('Probability $p$')
    plt.ylabel("Dimension")
    plt.title("Fitted Curve vs Target Values")
    plt.scatter(fit_data[:, 0], 
                [generalized_exp(p, expp[0][0], expp[0][1])for p in fit_data[:, 0]], 
                label = 'generalized_exp fit')
    plt.scatter(fit_data[:, 0], 
                fit_data[:, 1], label = 'target vals')
    plt.legend(loc = 'best')
    plt.show()
    print("Params: {}".format(expp[0]))
    
    def dim_func(x, a = expp[0][0], b = expp[0][1]):
        """
        The algebraic inverse of generalize_exp, with parameters tuned by the
        code above
        """
        if np.abs(x) &lt; 2:
            return (np.exp(x)-b)/a
        else:
            return None
        
    return dim_func

dim_func = get_dim_func(base = base)

print("\n****************** Making Encoding Matrices ******************\n")

def trunc(x, digits = 3):
    if type(x) == float:
        return round(x, digits)
    return None

def bins(n):
    dx = 2/n
    return [[i*dx, (i+1)*dx] for i in range(n)]

set_of_bins = bins(n_dbins)
set_of_p = [dim_func(bk[0] + 1/n_dbins) for bk in set_of_bins]
bins_of_E = [[] for i in range(n_dbins)]
set_of_dims = []
i=2 #skip the first bin because it's just all zeroes

print("Filling bins...")
while i &lt; len(set_of_bins):
    bk = set_of_bins[i]
    p = 1-set_of_p[i]
    E = abs(np.ceil(np.random.rand(base, base) - p))
    dim = dim_root_estimate(E)
    
    if dim &gt;= bk[0] and dim &lt;= bk[1]:
        bins_of_E[i].append(E)
        set_of_dims.append(dim)
    
    if len(bins_of_E[i]) &gt;= l:
        i += 1
        print("Bin {} out of {}: [{}, {}]".format(i, 
                                                  n_dbins, 
                                                  trunc(bk[0]), 
                                                  trunc(bk[1])))
        
plt.hist(set_of_dims, bins = 100)
plt.xlabel("Dimension")
plt.ylabel("Count")
plt.title("Distribution of Dimensions in the Data Set")
plt.show()

set_of_E = [E for sublist in bins_of_E for E in sublist] 

print("Done!")

return set_of_E
</code></pre></div></div>
:ET